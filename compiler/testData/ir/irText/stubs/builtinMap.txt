FILE fqName:<root> fileName:/builtinMap.kt
  FUN name:plus visibility:public modality:FINAL <K1, V1> ($receiver:kotlin.collections.Map<out <root>.plus.K1, <root>.plus.V1>, pair:kotlin.Pair<<root>.plus.K1, <root>.plus.V1>) returnType:kotlin.collections.Map<<root>.plus.K1, <root>.plus.V1> flags:[]
    TYPE_PARAMETER name:K1 index:0 variance: superTypes:[kotlin.Any?]
    TYPE_PARAMETER name:V1 index:1 variance: superTypes:[kotlin.Any?]
    $receiver: VALUE_PARAMETER name:<this> type:kotlin.collections.Map<out <root>.plus.K1, <root>.plus.V1> flags:[]
    VALUE_PARAMETER name:pair index:0 type:kotlin.Pair<<root>.plus.K1, <root>.plus.V1> flags:[]
    BLOCK_BODY
      RETURN type=kotlin.Nothing from='public final fun plus <K1, V1> (pair: kotlin.Pair<<root>.plus.K1, <root>.plus.V1>): kotlin.collections.Map<<root>.plus.K1, <root>.plus.V1> flags:[] declared in <root>'
        WHEN type=kotlin.collections.Map<<root>.plus.K1, <root>.plus.V1> origin=IF
          BRANCH
            if: CALL 'public abstract fun isEmpty <> (): kotlin.Boolean flags:[] declared in kotlin.collections.Map' type=kotlin.Boolean origin=null
              $this: GET_VAR '<this>: kotlin.collections.Map<out <root>.plus.K1, <root>.plus.V1> flags:[] declared in <root>.plus' type=kotlin.collections.Map<out <root>.plus.K1, <root>.plus.V1> origin=null
            then: CALL 'public final fun mapOf <K, V> (pair: kotlin.Pair<kotlin.collections.mapOf.K, kotlin.collections.mapOf.V>): kotlin.collections.Map<kotlin.collections.mapOf.K, kotlin.collections.mapOf.V> flags:[] declared in kotlin.collections' type=kotlin.collections.Map<<root>.plus.K1, <root>.plus.V1> origin=null
              <K>: <root>.plus.K1
              <V>: <root>.plus.V1
              pair: GET_VAR 'pair: kotlin.Pair<<root>.plus.K1, <root>.plus.V1> flags:[] declared in <root>.plus' type=kotlin.Pair<<root>.plus.K1, <root>.plus.V1> origin=null
          BRANCH
            if: CONST Boolean type=kotlin.Boolean value=true
            then: CALL 'public final fun apply <T> (block: @[CALL 'public constructor <init> <> () flags:[primary] declared in kotlin.ExtensionFunctionType' type=kotlin.ExtensionFunctionType origin=null] kotlin.Function1<kotlin.apply.T, kotlin.Unit>): kotlin.apply.T flags:[inline] declared in kotlin' type=java.util.LinkedHashMap<<root>.plus.K1?, <root>.plus.V1?> origin=null
              <T>: java.util.LinkedHashMap<<root>.plus.K1?, <root>.plus.V1?>
              $receiver: CALL 'public constructor <init> <> (p0: kotlin.collections.Map<out java.util.LinkedHashMap.K?, java.util.LinkedHashMap.V?>?) flags:[] declared in java.util.LinkedHashMap' type=java.util.LinkedHashMap<<root>.plus.K1?, <root>.plus.V1?> origin=null
                <K : Any!>: <root>.plus.K1?
                <V : Any!>: <root>.plus.V1?
                p0: GET_VAR '<this>: kotlin.collections.Map<out <root>.plus.K1, <root>.plus.V1> flags:[] declared in <root>.plus' type=kotlin.collections.Map<out <root>.plus.K1, <root>.plus.V1> origin=null
              block: BLOCK type=@[CALL 'public constructor <init> <> () flags:[primary] declared in kotlin.ExtensionFunctionType' type=kotlin.ExtensionFunctionType origin=null] kotlin.Function1<java.util.LinkedHashMap<<root>.plus.K1?, <root>.plus.V1?>, kotlin.Unit> origin=LAMBDA
                FUN LOCAL_FUNCTION_FOR_LAMBDA name:<anonymous> visibility:local modality:FINAL <> ($receiver:java.util.LinkedHashMap<<root>.plus.K1?, <root>.plus.V1?>) returnType:kotlin.Unit flags:[]
                  $receiver: VALUE_PARAMETER name:<this> type:java.util.LinkedHashMap<<root>.plus.K1?, <root>.plus.V1?> flags:[]
                  BLOCK_BODY
                    RETURN type=kotlin.Nothing from='local final fun <anonymous> <> (): kotlin.Unit flags:[] declared in <root>.plus'
                      TYPE_OP type=kotlin.Unit origin=IMPLICIT_COERCION_TO_UNIT typeOperand=kotlin.Unit
                        typeOperand: CLASS IR_EXTERNAL_DECLARATION_STUB OBJECT name:Unit modality:FINAL visibility:public flags:[] superTypes:[kotlin.Any]
                        CALL 'public open fun put <> (key: java.util.LinkedHashMap.K, value: java.util.LinkedHashMap.V): java.util.LinkedHashMap.V? flags:[] declared in java.util.LinkedHashMap' type=<root>.plus.V1? origin=null
                          $this: GET_VAR '<this>: java.util.LinkedHashMap<<root>.plus.K1?, <root>.plus.V1?> flags:[] declared in <root>.plus.<anonymous>' type=java.util.LinkedHashMap<<root>.plus.K1?, <root>.plus.V1?> origin=null
                          key: CALL 'public final fun <get-first> <> (): kotlin.Pair.A flags:[] declared in kotlin.Pair' type=<root>.plus.K1 origin=GET_PROPERTY
                            $this: GET_VAR 'pair: kotlin.Pair<<root>.plus.K1, <root>.plus.V1> flags:[] declared in <root>.plus' type=kotlin.Pair<<root>.plus.K1, <root>.plus.V1> origin=null
                          value: CALL 'public final fun <get-second> <> (): kotlin.Pair.B flags:[] declared in kotlin.Pair' type=<root>.plus.V1 origin=GET_PROPERTY
                            $this: GET_VAR 'pair: kotlin.Pair<<root>.plus.K1, <root>.plus.V1> flags:[] declared in <root>.plus' type=kotlin.Pair<<root>.plus.K1, <root>.plus.V1> origin=null
                FUNCTION_REFERENCE 'local final fun <anonymous> <> (): kotlin.Unit flags:[] declared in <root>.plus' type=@[CALL 'public constructor <init> <> () flags:[primary] declared in kotlin.ExtensionFunctionType' type=kotlin.ExtensionFunctionType origin=null] kotlin.Function1<java.util.LinkedHashMap<<root>.plus.K1?, <root>.plus.V1?>, kotlin.Unit> origin=LAMBDA
