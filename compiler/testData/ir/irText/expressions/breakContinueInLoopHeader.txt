FILE fqName:<root> fileName:/breakContinueInLoopHeader.kt
  FUN name:test1 visibility:public modality:FINAL <> (c:kotlin.Boolean?) returnType:kotlin.Unit flags:[]
    VALUE_PARAMETER name:c index:0 type:kotlin.Boolean? flags:[]
    BLOCK_BODY
      WHILE label=L origin=WHILE_LOOP
        condition: CONST Boolean type=kotlin.Boolean value=true
        body: BLOCK type=kotlin.Unit origin=null
          WHILE label=L2 origin=WHILE_LOOP
            condition: BLOCK type=kotlin.Boolean origin=ELVIS
              VAR IR_TEMPORARY_VARIABLE name:tmp0_elvis_lhs type:kotlin.Boolean? flags:[val]
                GET_VAR 'c: kotlin.Boolean? flags:[] declared in <root>.test1' type=kotlin.Boolean? origin=null
              WHEN type=kotlin.Boolean origin=null
                BRANCH
                  if: CALL 'public final fun EQEQ <> (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean flags:[] declared in kotlin.internal.ir' type=kotlin.Boolean origin=EQEQ
                    arg0: GET_VAR 'val tmp0_elvis_lhs: kotlin.Boolean? flags:[val] declared in <root>.test1' type=kotlin.Boolean? origin=null
                    arg1: CONST Null type=kotlin.Nothing? value=null
                  then: BREAK label=null loop.label=L
                BRANCH
                  if: CONST Boolean type=kotlin.Boolean value=true
                  then: GET_VAR 'val tmp0_elvis_lhs: kotlin.Boolean? flags:[val] declared in <root>.test1' type=kotlin.Boolean? origin=null
  FUN name:test2 visibility:public modality:FINAL <> (c:kotlin.Boolean?) returnType:kotlin.Unit flags:[]
    VALUE_PARAMETER name:c index:0 type:kotlin.Boolean? flags:[]
    BLOCK_BODY
      WHILE label=L origin=WHILE_LOOP
        condition: CONST Boolean type=kotlin.Boolean value=true
        body: BLOCK type=kotlin.Unit origin=null
          WHILE label=L2 origin=WHILE_LOOP
            condition: BLOCK type=kotlin.Boolean origin=ELVIS
              VAR IR_TEMPORARY_VARIABLE name:tmp0_elvis_lhs type:kotlin.Boolean? flags:[val]
                GET_VAR 'c: kotlin.Boolean? flags:[] declared in <root>.test2' type=kotlin.Boolean? origin=null
              WHEN type=kotlin.Boolean origin=null
                BRANCH
                  if: CALL 'public final fun EQEQ <> (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean flags:[] declared in kotlin.internal.ir' type=kotlin.Boolean origin=EQEQ
                    arg0: GET_VAR 'val tmp0_elvis_lhs: kotlin.Boolean? flags:[val] declared in <root>.test2' type=kotlin.Boolean? origin=null
                    arg1: CONST Null type=kotlin.Nothing? value=null
                  then: CONTINUE label=null loop.label=L
                BRANCH
                  if: CONST Boolean type=kotlin.Boolean value=true
                  then: GET_VAR 'val tmp0_elvis_lhs: kotlin.Boolean? flags:[val] declared in <root>.test2' type=kotlin.Boolean? origin=null
  FUN name:test3 visibility:public modality:FINAL <> (ss:kotlin.collections.List<kotlin.String>?) returnType:kotlin.Unit flags:[]
    VALUE_PARAMETER name:ss index:0 type:kotlin.collections.List<kotlin.String>? flags:[]
    BLOCK_BODY
      WHILE label=L origin=WHILE_LOOP
        condition: CONST Boolean type=kotlin.Boolean value=true
        body: BLOCK type=kotlin.Unit origin=null
          BLOCK type=kotlin.Unit origin=FOR_LOOP
            VAR FOR_LOOP_ITERATOR name:tmp1_iterator type:kotlin.collections.Iterator<kotlin.String> flags:[val]
              CALL 'public abstract fun iterator <> (): kotlin.collections.Iterator<kotlin.collections.List.E> flags:[] declared in kotlin.collections.List' type=kotlin.collections.Iterator<kotlin.String> origin=FOR_LOOP_ITERATOR
                $this: BLOCK type=kotlin.collections.List<kotlin.String> origin=ELVIS
                  VAR IR_TEMPORARY_VARIABLE name:tmp0_elvis_lhs type:kotlin.collections.List<kotlin.String>? flags:[val]
                    GET_VAR 'ss: kotlin.collections.List<kotlin.String>? flags:[] declared in <root>.test3' type=kotlin.collections.List<kotlin.String>? origin=null
                  WHEN type=kotlin.collections.List<kotlin.String> origin=null
                    BRANCH
                      if: CALL 'public final fun EQEQ <> (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean flags:[] declared in kotlin.internal.ir' type=kotlin.Boolean origin=EQEQ
                        arg0: GET_VAR 'val tmp0_elvis_lhs: kotlin.collections.List<kotlin.String>? flags:[val] declared in <root>.test3' type=kotlin.collections.List<kotlin.String>? origin=null
                        arg1: CONST Null type=kotlin.Nothing? value=null
                      then: CONTINUE label=null loop.label=L
                    BRANCH
                      if: CONST Boolean type=kotlin.Boolean value=true
                      then: GET_VAR 'val tmp0_elvis_lhs: kotlin.collections.List<kotlin.String>? flags:[val] declared in <root>.test3' type=kotlin.collections.List<kotlin.String>? origin=null
            WHILE label=L2 origin=FOR_LOOP_INNER_WHILE
              condition: CALL 'public abstract fun hasNext <> (): kotlin.Boolean flags:[] declared in kotlin.collections.Iterator' type=kotlin.Boolean origin=FOR_LOOP_HAS_NEXT
                $this: GET_VAR 'val tmp1_iterator: kotlin.collections.Iterator<kotlin.String> flags:[val] declared in <root>.test3' type=kotlin.collections.Iterator<kotlin.String> origin=null
              body: BLOCK type=kotlin.Unit origin=FOR_LOOP_INNER_WHILE
                VAR FOR_LOOP_VARIABLE name:s type:kotlin.String flags:[val]
                  CALL 'public abstract fun next <> (): kotlin.collections.Iterator.T flags:[] declared in kotlin.collections.Iterator' type=kotlin.String origin=FOR_LOOP_NEXT
                    $this: GET_VAR 'val tmp1_iterator: kotlin.collections.Iterator<kotlin.String> flags:[val] declared in <root>.test3' type=kotlin.collections.Iterator<kotlin.String> origin=null
  FUN name:test4 visibility:public modality:FINAL <> (ss:kotlin.collections.List<kotlin.String>?) returnType:kotlin.Unit flags:[]
    VALUE_PARAMETER name:ss index:0 type:kotlin.collections.List<kotlin.String>? flags:[]
    BLOCK_BODY
      WHILE label=L origin=WHILE_LOOP
        condition: CONST Boolean type=kotlin.Boolean value=true
        body: BLOCK type=kotlin.Unit origin=null
          BLOCK type=kotlin.Unit origin=FOR_LOOP
            VAR FOR_LOOP_ITERATOR name:tmp1_iterator type:kotlin.collections.Iterator<kotlin.String> flags:[val]
              CALL 'public abstract fun iterator <> (): kotlin.collections.Iterator<kotlin.collections.List.E> flags:[] declared in kotlin.collections.List' type=kotlin.collections.Iterator<kotlin.String> origin=FOR_LOOP_ITERATOR
                $this: BLOCK type=kotlin.collections.List<kotlin.String> origin=ELVIS
                  VAR IR_TEMPORARY_VARIABLE name:tmp0_elvis_lhs type:kotlin.collections.List<kotlin.String>? flags:[val]
                    GET_VAR 'ss: kotlin.collections.List<kotlin.String>? flags:[] declared in <root>.test4' type=kotlin.collections.List<kotlin.String>? origin=null
                  WHEN type=kotlin.collections.List<kotlin.String> origin=null
                    BRANCH
                      if: CALL 'public final fun EQEQ <> (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean flags:[] declared in kotlin.internal.ir' type=kotlin.Boolean origin=EQEQ
                        arg0: GET_VAR 'val tmp0_elvis_lhs: kotlin.collections.List<kotlin.String>? flags:[val] declared in <root>.test4' type=kotlin.collections.List<kotlin.String>? origin=null
                        arg1: CONST Null type=kotlin.Nothing? value=null
                      then: BREAK label=null loop.label=L
                    BRANCH
                      if: CONST Boolean type=kotlin.Boolean value=true
                      then: GET_VAR 'val tmp0_elvis_lhs: kotlin.collections.List<kotlin.String>? flags:[val] declared in <root>.test4' type=kotlin.collections.List<kotlin.String>? origin=null
            WHILE label=L2 origin=FOR_LOOP_INNER_WHILE
              condition: CALL 'public abstract fun hasNext <> (): kotlin.Boolean flags:[] declared in kotlin.collections.Iterator' type=kotlin.Boolean origin=FOR_LOOP_HAS_NEXT
                $this: GET_VAR 'val tmp1_iterator: kotlin.collections.Iterator<kotlin.String> flags:[val] declared in <root>.test4' type=kotlin.collections.Iterator<kotlin.String> origin=null
              body: BLOCK type=kotlin.Unit origin=FOR_LOOP_INNER_WHILE
                VAR FOR_LOOP_VARIABLE name:s type:kotlin.String flags:[val]
                  CALL 'public abstract fun next <> (): kotlin.collections.Iterator.T flags:[] declared in kotlin.collections.Iterator' type=kotlin.String origin=FOR_LOOP_NEXT
                    $this: GET_VAR 'val tmp1_iterator: kotlin.collections.Iterator<kotlin.String> flags:[val] declared in <root>.test4' type=kotlin.collections.Iterator<kotlin.String> origin=null
  FUN name:test5 visibility:public modality:FINAL <> () returnType:kotlin.Unit flags:[]
    BLOCK_BODY
      VAR name:i type:kotlin.Int flags:[var]
        CONST Int type=kotlin.Int value=0
      WHILE label=Outer origin=WHILE_LOOP
        condition: CONST Boolean type=kotlin.Boolean value=true
        body: BLOCK type=kotlin.Unit origin=null
          TYPE_OP type=kotlin.Unit origin=IMPLICIT_COERCION_TO_UNIT typeOperand=kotlin.Unit
            typeOperand: CLASS IR_EXTERNAL_DECLARATION_STUB OBJECT name:Unit modality:FINAL visibility:public flags:[] superTypes:[kotlin.Any]
            BLOCK type=kotlin.Int origin=PREFIX_INCR
              SET_VAR 'var i: kotlin.Int flags:[var] declared in <root>.test5' type=kotlin.Unit origin=PREFIX_INCR
                CALL 'public final fun inc <> (): kotlin.Int flags:[] declared in kotlin.Int' type=kotlin.Int origin=PREFIX_INCR
                  $this: GET_VAR 'var i: kotlin.Int flags:[var] declared in <root>.test5' type=kotlin.Int origin=PREFIX_INCR
              GET_VAR 'var i: kotlin.Int flags:[var] declared in <root>.test5' type=kotlin.Int origin=PREFIX_INCR
          VAR name:j type:kotlin.Int flags:[var]
            CONST Int type=kotlin.Int value=0
          BLOCK type=kotlin.Unit origin=null
            DO_WHILE label=Inner origin=DO_WHILE_LOOP
              body: COMPOSITE type=kotlin.Unit origin=null
                TYPE_OP type=kotlin.Unit origin=IMPLICIT_COERCION_TO_UNIT typeOperand=kotlin.Unit
                  typeOperand: CLASS IR_EXTERNAL_DECLARATION_STUB OBJECT name:Unit modality:FINAL visibility:public flags:[] superTypes:[kotlin.Any]
                  BLOCK type=kotlin.Int origin=PREFIX_INCR
                    SET_VAR 'var j: kotlin.Int flags:[var] declared in <root>.test5' type=kotlin.Unit origin=PREFIX_INCR
                      CALL 'public final fun inc <> (): kotlin.Int flags:[] declared in kotlin.Int' type=kotlin.Int origin=PREFIX_INCR
                        $this: GET_VAR 'var j: kotlin.Int flags:[var] declared in <root>.test5' type=kotlin.Int origin=PREFIX_INCR
                    GET_VAR 'var j: kotlin.Int flags:[var] declared in <root>.test5' type=kotlin.Int origin=PREFIX_INCR
              condition: WHEN type=kotlin.Boolean origin=IF
                BRANCH
                  if: CALL 'public final fun greaterOrEqual <> (arg0: kotlin.Int, arg1: kotlin.Int): kotlin.Boolean flags:[] declared in kotlin.internal.ir' type=kotlin.Boolean origin=GTEQ
                    arg0: GET_VAR 'var j: kotlin.Int flags:[var] declared in <root>.test5' type=kotlin.Int origin=null
                    arg1: CONST Int type=kotlin.Int value=3
                  then: CONST Boolean type=kotlin.Boolean value=false
                BRANCH
                  if: CONST Boolean type=kotlin.Boolean value=true
                  then: BREAK label=null loop.label=Inner
          WHEN type=kotlin.Unit origin=IF
            BRANCH
              if: CALL 'public final fun EQEQ <> (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean flags:[] declared in kotlin.internal.ir' type=kotlin.Boolean origin=EQEQ
                arg0: GET_VAR 'var i: kotlin.Int flags:[var] declared in <root>.test5' type=kotlin.Int origin=null
                arg1: CONST Int type=kotlin.Int value=3
              then: BREAK label=null loop.label=Outer
