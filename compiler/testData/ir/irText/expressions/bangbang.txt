FILE fqName:<root> fileName:/bangbang.kt
  FUN name:test1 visibility:public modality:FINAL <> (a:kotlin.Any?) returnType:kotlin.Any flags:[]
    VALUE_PARAMETER name:a index:0 type:kotlin.Any? flags:[]
    BLOCK_BODY
      RETURN type=kotlin.Nothing from='public final fun test1 <> (a: kotlin.Any?): kotlin.Any flags:[] declared in <root>'
        BLOCK type=kotlin.Any origin=EXCLEXCL
          VAR IR_TEMPORARY_VARIABLE name:tmp0_notnull type:kotlin.Any? flags:[val]
            GET_VAR 'a: kotlin.Any? flags:[] declared in <root>.test1' type=kotlin.Any? origin=null
          WHEN type=kotlin.Any origin=null
            BRANCH
              if: CALL 'public final fun EQEQ <> (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean flags:[] declared in kotlin.internal.ir' type=kotlin.Boolean origin=EQEQ
                arg0: GET_VAR 'val tmp0_notnull: kotlin.Any? flags:[val] declared in <root>.test1' type=kotlin.Any? origin=null
                arg1: CONST Null type=kotlin.Nothing? value=null
              then: CALL 'public final fun THROW_NPE <> (): kotlin.Nothing flags:[] declared in kotlin.internal.ir' type=kotlin.Nothing origin=EXCLEXCL
            BRANCH
              if: CONST Boolean type=kotlin.Boolean value=true
              then: GET_VAR 'val tmp0_notnull: kotlin.Any? flags:[val] declared in <root>.test1' type=kotlin.Any? origin=null
  FUN name:test2 visibility:public modality:FINAL <> (a:kotlin.Any?) returnType:kotlin.Int flags:[]
    VALUE_PARAMETER name:a index:0 type:kotlin.Any? flags:[]
    BLOCK_BODY
      RETURN type=kotlin.Nothing from='public final fun test2 <> (a: kotlin.Any?): kotlin.Int flags:[] declared in <root>'
        BLOCK type=kotlin.Int origin=EXCLEXCL
          VAR IR_TEMPORARY_VARIABLE name:tmp1_notnull type:kotlin.Int? flags:[val]
            BLOCK type=kotlin.Int? origin=SAFE_CALL
              VAR IR_TEMPORARY_VARIABLE name:tmp0_safe_receiver type:kotlin.Any? flags:[val]
                GET_VAR 'a: kotlin.Any? flags:[] declared in <root>.test2' type=kotlin.Any? origin=null
              WHEN type=kotlin.Int? origin=null
                BRANCH
                  if: CALL 'public final fun EQEQ <> (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean flags:[] declared in kotlin.internal.ir' type=kotlin.Boolean origin=EQEQ
                    arg0: GET_VAR 'val tmp0_safe_receiver: kotlin.Any? flags:[val] declared in <root>.test2' type=kotlin.Any? origin=null
                    arg1: CONST Null type=kotlin.Nothing? value=null
                  then: CONST Null type=kotlin.Nothing? value=null
                BRANCH
                  if: CONST Boolean type=kotlin.Boolean value=true
                  then: CALL 'public open fun hashCode <> (): kotlin.Int flags:[] declared in kotlin.Any' type=kotlin.Int origin=null
                    $this: GET_VAR 'val tmp0_safe_receiver: kotlin.Any? flags:[val] declared in <root>.test2' type=kotlin.Any? origin=null
          WHEN type=kotlin.Int origin=null
            BRANCH
              if: CALL 'public final fun EQEQ <> (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean flags:[] declared in kotlin.internal.ir' type=kotlin.Boolean origin=EQEQ
                arg0: GET_VAR 'val tmp1_notnull: kotlin.Int? flags:[val] declared in <root>.test2' type=kotlin.Int? origin=null
                arg1: CONST Null type=kotlin.Nothing? value=null
              then: CALL 'public final fun THROW_NPE <> (): kotlin.Nothing flags:[] declared in kotlin.internal.ir' type=kotlin.Nothing origin=EXCLEXCL
            BRANCH
              if: CONST Boolean type=kotlin.Boolean value=true
              then: GET_VAR 'val tmp1_notnull: kotlin.Int? flags:[val] declared in <root>.test2' type=kotlin.Int? origin=null
