FILE fqName:<root> fileName:/whenByFloatingPoint.kt
  FUN name:testSimple visibility:public modality:FINAL <> (x:kotlin.Double) returnType:kotlin.Int flags:[]
    VALUE_PARAMETER name:x index:0 type:kotlin.Double flags:[]
    BLOCK_BODY
      RETURN type=kotlin.Nothing from='public final fun testSimple <> (x: kotlin.Double): kotlin.Int flags:[] declared in <root>'
        BLOCK type=kotlin.Int origin=WHEN
          VAR IR_TEMPORARY_VARIABLE name:tmp0_subject type:kotlin.Double flags:[val]
            GET_VAR 'x: kotlin.Double flags:[] declared in <root>.testSimple' type=kotlin.Double origin=null
          WHEN type=kotlin.Int origin=WHEN
            BRANCH
              if: CALL 'public final fun ieee754equals <> (arg0: kotlin.Double?, arg1: kotlin.Double?): kotlin.Boolean flags:[] declared in kotlin.internal.ir' type=kotlin.Boolean origin=EQEQ
                arg0: GET_VAR 'val tmp0_subject: kotlin.Double flags:[val] declared in <root>.testSimple' type=kotlin.Double origin=null
                arg1: CONST Double type=kotlin.Double value=0.0
              then: CONST Int type=kotlin.Int value=0
            BRANCH
              if: CONST Boolean type=kotlin.Boolean value=true
              then: CONST Int type=kotlin.Int value=1
  FUN name:testSmartCastInWhenSubject visibility:public modality:FINAL <> (x:kotlin.Any) returnType:kotlin.Int flags:[]
    VALUE_PARAMETER name:x index:0 type:kotlin.Any flags:[]
    BLOCK_BODY
      WHEN type=kotlin.Unit origin=IF
        BRANCH
          if: TYPE_OP type=kotlin.Boolean origin=NOT_INSTANCEOF typeOperand=kotlin.Double
            typeOperand: CLASS IR_EXTERNAL_DECLARATION_STUB CLASS name:Double modality:FINAL visibility:public flags:[] superTypes:[kotlin.Number; kotlin.Comparable<kotlin.Double>; java.io.Serializable]
            GET_VAR 'x: kotlin.Any flags:[] declared in <root>.testSmartCastInWhenSubject' type=kotlin.Any origin=null
          then: RETURN type=kotlin.Nothing from='public final fun testSmartCastInWhenSubject <> (x: kotlin.Any): kotlin.Int flags:[] declared in <root>'
            CONST Int type=kotlin.Int value=-1
      RETURN type=kotlin.Nothing from='public final fun testSmartCastInWhenSubject <> (x: kotlin.Any): kotlin.Int flags:[] declared in <root>'
        BLOCK type=kotlin.Int origin=WHEN
          VAR IR_TEMPORARY_VARIABLE name:tmp0_subject type:kotlin.Any flags:[val]
            GET_VAR 'x: kotlin.Any flags:[] declared in <root>.testSmartCastInWhenSubject' type=kotlin.Any origin=null
          WHEN type=kotlin.Int origin=WHEN
            BRANCH
              if: CALL 'public final fun ieee754equals <> (arg0: kotlin.Double?, arg1: kotlin.Double?): kotlin.Boolean flags:[] declared in kotlin.internal.ir' type=kotlin.Boolean origin=EQEQ
                arg0: TYPE_OP type=kotlin.Double origin=IMPLICIT_CAST typeOperand=kotlin.Double
                  typeOperand: CLASS IR_EXTERNAL_DECLARATION_STUB CLASS name:Double modality:FINAL visibility:public flags:[] superTypes:[kotlin.Number; kotlin.Comparable<kotlin.Double>; java.io.Serializable]
                  GET_VAR 'val tmp0_subject: kotlin.Any flags:[val] declared in <root>.testSmartCastInWhenSubject' type=kotlin.Any origin=null
                arg1: CONST Double type=kotlin.Double value=0.0
              then: CONST Int type=kotlin.Int value=0
            BRANCH
              if: CONST Boolean type=kotlin.Boolean value=true
              then: CONST Int type=kotlin.Int value=1
  FUN name:testSmartCastInWhenCondition visibility:public modality:FINAL <> (x:kotlin.Double, y:kotlin.Any) returnType:kotlin.Int flags:[]
    VALUE_PARAMETER name:x index:0 type:kotlin.Double flags:[]
    VALUE_PARAMETER name:y index:1 type:kotlin.Any flags:[]
    BLOCK_BODY
      WHEN type=kotlin.Unit origin=IF
        BRANCH
          if: TYPE_OP type=kotlin.Boolean origin=NOT_INSTANCEOF typeOperand=kotlin.Double
            typeOperand: CLASS IR_EXTERNAL_DECLARATION_STUB CLASS name:Double modality:FINAL visibility:public flags:[] superTypes:[kotlin.Number; kotlin.Comparable<kotlin.Double>; java.io.Serializable]
            GET_VAR 'y: kotlin.Any flags:[] declared in <root>.testSmartCastInWhenCondition' type=kotlin.Any origin=null
          then: RETURN type=kotlin.Nothing from='public final fun testSmartCastInWhenCondition <> (x: kotlin.Double, y: kotlin.Any): kotlin.Int flags:[] declared in <root>'
            CONST Int type=kotlin.Int value=-1
      RETURN type=kotlin.Nothing from='public final fun testSmartCastInWhenCondition <> (x: kotlin.Double, y: kotlin.Any): kotlin.Int flags:[] declared in <root>'
        BLOCK type=kotlin.Int origin=WHEN
          VAR IR_TEMPORARY_VARIABLE name:tmp0_subject type:kotlin.Double flags:[val]
            GET_VAR 'x: kotlin.Double flags:[] declared in <root>.testSmartCastInWhenCondition' type=kotlin.Double origin=null
          WHEN type=kotlin.Int origin=WHEN
            BRANCH
              if: CALL 'public final fun ieee754equals <> (arg0: kotlin.Double?, arg1: kotlin.Double?): kotlin.Boolean flags:[] declared in kotlin.internal.ir' type=kotlin.Boolean origin=EQEQ
                arg0: GET_VAR 'val tmp0_subject: kotlin.Double flags:[val] declared in <root>.testSmartCastInWhenCondition' type=kotlin.Double origin=null
                arg1: TYPE_OP type=kotlin.Double origin=IMPLICIT_CAST typeOperand=kotlin.Double
                  typeOperand: CLASS IR_EXTERNAL_DECLARATION_STUB CLASS name:Double modality:FINAL visibility:public flags:[] superTypes:[kotlin.Number; kotlin.Comparable<kotlin.Double>; java.io.Serializable]
                  GET_VAR 'y: kotlin.Any flags:[] declared in <root>.testSmartCastInWhenCondition' type=kotlin.Any origin=null
              then: CONST Int type=kotlin.Int value=0
            BRANCH
              if: CONST Boolean type=kotlin.Boolean value=true
              then: CONST Int type=kotlin.Int value=1
  FUN name:testSmartCastInWhenConditionInBranch visibility:public modality:FINAL <> (x:kotlin.Any) returnType:kotlin.Int flags:[]
    VALUE_PARAMETER name:x index:0 type:kotlin.Any flags:[]
    BLOCK_BODY
      RETURN type=kotlin.Nothing from='public final fun testSmartCastInWhenConditionInBranch <> (x: kotlin.Any): kotlin.Int flags:[] declared in <root>'
        BLOCK type=kotlin.Int origin=WHEN
          VAR IR_TEMPORARY_VARIABLE name:tmp0_subject type:kotlin.Any flags:[val]
            GET_VAR 'x: kotlin.Any flags:[] declared in <root>.testSmartCastInWhenConditionInBranch' type=kotlin.Any origin=null
          WHEN type=kotlin.Int origin=WHEN
            BRANCH
              if: CALL 'public final fun NOT <> (arg0: kotlin.Boolean): kotlin.Boolean flags:[] declared in kotlin.internal.ir' type=kotlin.Boolean origin=EXCL
                arg0: TYPE_OP type=kotlin.Boolean origin=INSTANCEOF typeOperand=kotlin.Double
                  typeOperand: CLASS IR_EXTERNAL_DECLARATION_STUB CLASS name:Double modality:FINAL visibility:public flags:[] superTypes:[kotlin.Number; kotlin.Comparable<kotlin.Double>; java.io.Serializable]
                  GET_VAR 'val tmp0_subject: kotlin.Any flags:[val] declared in <root>.testSmartCastInWhenConditionInBranch' type=kotlin.Any origin=null
              then: CONST Int type=kotlin.Int value=-1
            BRANCH
              if: CALL 'public final fun ieee754equals <> (arg0: kotlin.Double?, arg1: kotlin.Double?): kotlin.Boolean flags:[] declared in kotlin.internal.ir' type=kotlin.Boolean origin=EQEQ
                arg0: TYPE_OP type=kotlin.Double origin=IMPLICIT_CAST typeOperand=kotlin.Double
                  typeOperand: CLASS IR_EXTERNAL_DECLARATION_STUB CLASS name:Double modality:FINAL visibility:public flags:[] superTypes:[kotlin.Number; kotlin.Comparable<kotlin.Double>; java.io.Serializable]
                  GET_VAR 'val tmp0_subject: kotlin.Any flags:[val] declared in <root>.testSmartCastInWhenConditionInBranch' type=kotlin.Any origin=null
                arg1: CONST Double type=kotlin.Double value=0.0
              then: CONST Int type=kotlin.Int value=0
            BRANCH
              if: CONST Boolean type=kotlin.Boolean value=true
              then: CONST Int type=kotlin.Int value=1
  FUN name:testSmartCastToDifferentTypes visibility:public modality:FINAL <> (x:kotlin.Any, y:kotlin.Any) returnType:kotlin.Int flags:[]
    VALUE_PARAMETER name:x index:0 type:kotlin.Any flags:[]
    VALUE_PARAMETER name:y index:1 type:kotlin.Any flags:[]
    BLOCK_BODY
      WHEN type=kotlin.Unit origin=IF
        BRANCH
          if: TYPE_OP type=kotlin.Boolean origin=NOT_INSTANCEOF typeOperand=kotlin.Double
            typeOperand: CLASS IR_EXTERNAL_DECLARATION_STUB CLASS name:Double modality:FINAL visibility:public flags:[] superTypes:[kotlin.Number; kotlin.Comparable<kotlin.Double>; java.io.Serializable]
            GET_VAR 'x: kotlin.Any flags:[] declared in <root>.testSmartCastToDifferentTypes' type=kotlin.Any origin=null
          then: RETURN type=kotlin.Nothing from='public final fun testSmartCastToDifferentTypes <> (x: kotlin.Any, y: kotlin.Any): kotlin.Int flags:[] declared in <root>'
            CONST Int type=kotlin.Int value=-1
      WHEN type=kotlin.Unit origin=IF
        BRANCH
          if: TYPE_OP type=kotlin.Boolean origin=NOT_INSTANCEOF typeOperand=kotlin.Float
            typeOperand: CLASS IR_EXTERNAL_DECLARATION_STUB CLASS name:Float modality:FINAL visibility:public flags:[] superTypes:[kotlin.Number; kotlin.Comparable<kotlin.Float>; java.io.Serializable]
            GET_VAR 'y: kotlin.Any flags:[] declared in <root>.testSmartCastToDifferentTypes' type=kotlin.Any origin=null
          then: RETURN type=kotlin.Nothing from='public final fun testSmartCastToDifferentTypes <> (x: kotlin.Any, y: kotlin.Any): kotlin.Int flags:[] declared in <root>'
            CONST Int type=kotlin.Int value=-1
      RETURN type=kotlin.Nothing from='public final fun testSmartCastToDifferentTypes <> (x: kotlin.Any, y: kotlin.Any): kotlin.Int flags:[] declared in <root>'
        BLOCK type=kotlin.Int origin=WHEN
          VAR IR_TEMPORARY_VARIABLE name:tmp0_subject type:kotlin.Any flags:[val]
            GET_VAR 'x: kotlin.Any flags:[] declared in <root>.testSmartCastToDifferentTypes' type=kotlin.Any origin=null
          WHEN type=kotlin.Int origin=WHEN
            BRANCH
              if: CALL 'public final fun ieee754equals <> (arg0: kotlin.Double?, arg1: kotlin.Double?): kotlin.Boolean flags:[] declared in kotlin.internal.ir' type=kotlin.Boolean origin=EQEQ
                arg0: TYPE_OP type=kotlin.Double origin=IMPLICIT_CAST typeOperand=kotlin.Double
                  typeOperand: CLASS IR_EXTERNAL_DECLARATION_STUB CLASS name:Double modality:FINAL visibility:public flags:[] superTypes:[kotlin.Number; kotlin.Comparable<kotlin.Double>; java.io.Serializable]
                  GET_VAR 'val tmp0_subject: kotlin.Any flags:[val] declared in <root>.testSmartCastToDifferentTypes' type=kotlin.Any origin=null
                arg1: CALL 'public open fun toDouble <> (): kotlin.Double flags:[] declared in kotlin.Float' type=kotlin.Double origin=null
                  $this: TYPE_OP type=kotlin.Float origin=IMPLICIT_CAST typeOperand=kotlin.Float
                    typeOperand: CLASS IR_EXTERNAL_DECLARATION_STUB CLASS name:Float modality:FINAL visibility:public flags:[] superTypes:[kotlin.Number; kotlin.Comparable<kotlin.Float>; java.io.Serializable]
                    GET_VAR 'y: kotlin.Any flags:[] declared in <root>.testSmartCastToDifferentTypes' type=kotlin.Any origin=null
              then: CONST Int type=kotlin.Int value=0
            BRANCH
              if: CONST Boolean type=kotlin.Boolean value=true
              then: CONST Int type=kotlin.Int value=1
  FUN name:foo visibility:public modality:FINAL <> (x:kotlin.Double) returnType:kotlin.Double flags:[]
    VALUE_PARAMETER name:x index:0 type:kotlin.Double flags:[]
    BLOCK_BODY
      RETURN type=kotlin.Nothing from='public final fun foo <> (x: kotlin.Double): kotlin.Double flags:[] declared in <root>'
        GET_VAR 'x: kotlin.Double flags:[] declared in <root>.foo' type=kotlin.Double origin=null
  FUN name:testWithPrematureExitInConditionSubexpression visibility:public modality:FINAL <> (x:kotlin.Any) returnType:kotlin.Int flags:[]
    VALUE_PARAMETER name:x index:0 type:kotlin.Any flags:[]
    BLOCK_BODY
      RETURN type=kotlin.Nothing from='public final fun testWithPrematureExitInConditionSubexpression <> (x: kotlin.Any): kotlin.Int flags:[] declared in <root>'
        BLOCK type=kotlin.Int origin=WHEN
          VAR IR_TEMPORARY_VARIABLE name:tmp0_subject type:kotlin.Any flags:[val]
            GET_VAR 'x: kotlin.Any flags:[] declared in <root>.testWithPrematureExitInConditionSubexpression' type=kotlin.Any origin=null
          WHEN type=kotlin.Int origin=WHEN
            BRANCH
              if: CALL 'public final fun EQEQ <> (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean flags:[] declared in kotlin.internal.ir' type=kotlin.Boolean origin=EQEQ
                arg0: GET_VAR 'val tmp0_subject: kotlin.Any flags:[val] declared in <root>.testWithPrematureExitInConditionSubexpression' type=kotlin.Any origin=null
                arg1: CALL 'public final fun foo <> (x: kotlin.Double): kotlin.Double flags:[] declared in <root>' type=kotlin.Double origin=null
                  x: WHEN type=kotlin.Double origin=IF
                    BRANCH
                      if: TYPE_OP type=kotlin.Boolean origin=NOT_INSTANCEOF typeOperand=kotlin.Double
                        typeOperand: CLASS IR_EXTERNAL_DECLARATION_STUB CLASS name:Double modality:FINAL visibility:public flags:[] superTypes:[kotlin.Number; kotlin.Comparable<kotlin.Double>; java.io.Serializable]
                        GET_VAR 'x: kotlin.Any flags:[] declared in <root>.testWithPrematureExitInConditionSubexpression' type=kotlin.Any origin=null
                      then: RETURN type=kotlin.Nothing from='public final fun testWithPrematureExitInConditionSubexpression <> (x: kotlin.Any): kotlin.Int flags:[] declared in <root>'
                        CONST Int type=kotlin.Int value=42
                    BRANCH
                      if: CONST Boolean type=kotlin.Boolean value=true
                      then: TYPE_OP type=kotlin.Double origin=IMPLICIT_CAST typeOperand=kotlin.Double
                        typeOperand: CLASS IR_EXTERNAL_DECLARATION_STUB CLASS name:Double modality:FINAL visibility:public flags:[] superTypes:[kotlin.Number; kotlin.Comparable<kotlin.Double>; java.io.Serializable]
                        GET_VAR 'x: kotlin.Any flags:[] declared in <root>.testWithPrematureExitInConditionSubexpression' type=kotlin.Any origin=null
              then: CONST Int type=kotlin.Int value=0
            BRANCH
              if: CONST Boolean type=kotlin.Boolean value=true
              then: CONST Int type=kotlin.Int value=1
