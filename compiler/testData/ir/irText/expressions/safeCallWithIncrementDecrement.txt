FILE fqName:test fileName:/safeCallWithIncrementDecrement.kt
  CLASS CLASS name:C modality:FINAL visibility:public flags:[] superTypes:[kotlin.Any]
    $this: VALUE_PARAMETER INSTANCE_RECEIVER name:<this> type:test.C flags:[]
    CONSTRUCTOR visibility:public <> () returnType:test.C flags:[primary]
      BLOCK_BODY
        DELEGATING_CONSTRUCTOR_CALL 'public constructor <init> <> () flags:[primary] declared in kotlin.Any'
        INSTANCE_INITIALIZER_CALL classDescriptor='CLASS CLASS name:C modality:FINAL visibility:public flags:[] superTypes:[kotlin.Any]'
    FUN FAKE_OVERRIDE name:equals visibility:public modality:OPEN <> ($this:kotlin.Any, other:kotlin.Any?) returnType:kotlin.Boolean flags:[]
      overridden:
        FUN IR_EXTERNAL_DECLARATION_STUB name:equals visibility:public modality:OPEN <> ($this:kotlin.Any, other:kotlin.Any?) returnType:kotlin.Boolean flags:[]
      $this: VALUE_PARAMETER name:<this> type:kotlin.Any flags:[]
      VALUE_PARAMETER name:other index:0 type:kotlin.Any? flags:[]
    FUN FAKE_OVERRIDE name:hashCode visibility:public modality:OPEN <> ($this:kotlin.Any) returnType:kotlin.Int flags:[]
      overridden:
        FUN IR_EXTERNAL_DECLARATION_STUB name:hashCode visibility:public modality:OPEN <> ($this:kotlin.Any) returnType:kotlin.Int flags:[]
      $this: VALUE_PARAMETER name:<this> type:kotlin.Any flags:[]
    FUN FAKE_OVERRIDE name:toString visibility:public modality:OPEN <> ($this:kotlin.Any) returnType:kotlin.String flags:[]
      overridden:
        FUN IR_EXTERNAL_DECLARATION_STUB name:toString visibility:public modality:OPEN <> ($this:kotlin.Any) returnType:kotlin.String flags:[]
      $this: VALUE_PARAMETER name:<this> type:kotlin.Any flags:[]
  PROPERTY name:p visibility:public modality:FINAL flags:[var]
    FUN name:<get-p> visibility:public modality:FINAL <> ($receiver:test.C?) returnType:kotlin.Int flags:[]
      correspondingProperty: PROPERTY name:p visibility:public modality:FINAL flags:[var]
      $receiver: VALUE_PARAMETER name:<this> type:test.C? flags:[]
      BLOCK_BODY
        RETURN type=kotlin.Nothing from='public final fun <get-p> <> (): kotlin.Int flags:[] declared in test'
          CONST Int type=kotlin.Int value=42
    FUN name:<set-p> visibility:public modality:FINAL <> ($receiver:test.C?, value:kotlin.Int) returnType:kotlin.Unit flags:[]
      correspondingProperty: PROPERTY name:p visibility:public modality:FINAL flags:[var]
      $receiver: VALUE_PARAMETER name:<this> type:test.C? flags:[]
      VALUE_PARAMETER name:value index:0 type:kotlin.Int flags:[]
      BLOCK_BODY
  FUN name:inc visibility:public modality:FINAL <> ($receiver:kotlin.Int?) returnType:kotlin.Int? flags:[]
    $receiver: VALUE_PARAMETER name:<this> type:kotlin.Int? flags:[]
    BLOCK_BODY
      RETURN type=kotlin.Nothing from='public final fun inc <> (): kotlin.Int? flags:[] declared in test'
        BLOCK type=kotlin.Int? origin=SAFE_CALL
          VAR IR_TEMPORARY_VARIABLE name:tmp0_safe_receiver type:kotlin.Int? flags:[val]
            GET_VAR '<this>: kotlin.Int? flags:[] declared in test.inc' type=kotlin.Int? origin=null
          WHEN type=kotlin.Int? origin=null
            BRANCH
              if: CALL 'public final fun EQEQ <> (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean flags:[] declared in kotlin.internal.ir' type=kotlin.Boolean origin=EQEQ
                arg0: GET_VAR 'val tmp0_safe_receiver: kotlin.Int? flags:[val] declared in test.inc' type=kotlin.Int? origin=null
                arg1: CONST Null type=kotlin.Nothing? value=null
              then: CONST Null type=kotlin.Nothing? value=null
            BRANCH
              if: CONST Boolean type=kotlin.Boolean value=true
              then: CALL 'public final fun inc <> (): kotlin.Int flags:[] declared in kotlin.Int' type=kotlin.Int origin=null
                $this: GET_VAR 'val tmp0_safe_receiver: kotlin.Int? flags:[val] declared in test.inc' type=kotlin.Int? origin=null
  FUN name:get visibility:public modality:FINAL <> ($receiver:kotlin.Int?, index:kotlin.Int) returnType:kotlin.Int flags:[]
    $receiver: VALUE_PARAMETER name:<this> type:kotlin.Int? flags:[]
    VALUE_PARAMETER name:index index:0 type:kotlin.Int flags:[]
    BLOCK_BODY
      RETURN type=kotlin.Nothing from='public final fun get <> (index: kotlin.Int): kotlin.Int flags:[] declared in test'
        CONST Int type=kotlin.Int value=42
  FUN name:set visibility:public modality:FINAL <> ($receiver:kotlin.Int?, index:kotlin.Int, value:kotlin.Int) returnType:kotlin.Unit flags:[]
    $receiver: VALUE_PARAMETER name:<this> type:kotlin.Int? flags:[]
    VALUE_PARAMETER name:index index:0 type:kotlin.Int flags:[]
    VALUE_PARAMETER name:value index:1 type:kotlin.Int flags:[]
    BLOCK_BODY
  FUN name:testProperty visibility:public modality:FINAL <> (nc:test.C?) returnType:kotlin.Unit flags:[]
    VALUE_PARAMETER name:nc index:0 type:test.C? flags:[]
    BLOCK_BODY
      TYPE_OP type=kotlin.Unit origin=IMPLICIT_COERCION_TO_UNIT typeOperand=kotlin.Unit
        typeOperand: CLASS IR_EXTERNAL_DECLARATION_STUB OBJECT name:Unit modality:FINAL visibility:public flags:[] superTypes:[kotlin.Any]
        BLOCK type=kotlin.Int? origin=SAFE_CALL
          VAR IR_TEMPORARY_VARIABLE name:tmp0_safe_receiver type:test.C? flags:[val]
            GET_VAR 'nc: test.C? flags:[] declared in test.testProperty' type=test.C? origin=null
          WHEN type=kotlin.Int? origin=null
            BRANCH
              if: CALL 'public final fun EQEQ <> (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean flags:[] declared in kotlin.internal.ir' type=kotlin.Boolean origin=EQEQ
                arg0: GET_VAR 'val tmp0_safe_receiver: test.C? flags:[val] declared in test.testProperty' type=test.C? origin=null
                arg1: CONST Null type=kotlin.Nothing? value=null
              then: CONST Null type=kotlin.Nothing? value=null
            BRANCH
              if: CONST Boolean type=kotlin.Boolean value=true
              then: BLOCK type=kotlin.Int origin=POSTFIX_INCR
                VAR IR_TEMPORARY_VARIABLE name:tmp1_receiver type:test.C? flags:[val]
                  GET_VAR 'val tmp0_safe_receiver: test.C? flags:[val] declared in test.testProperty' type=test.C? origin=null
                BLOCK type=kotlin.Int origin=POSTFIX_INCR
                  VAR IR_TEMPORARY_VARIABLE name:tmp2 type:kotlin.Int flags:[val]
                    CALL 'public final fun <get-p> <> (): kotlin.Int flags:[] declared in test' type=kotlin.Int origin=POSTFIX_INCR
                      $receiver: GET_VAR 'val tmp1_receiver: test.C? flags:[val] declared in test.testProperty' type=test.C? origin=null
                  CALL 'public final fun <set-p> <> (value: kotlin.Int): kotlin.Unit flags:[] declared in test' type=kotlin.Unit origin=POSTFIX_INCR
                    $receiver: GET_VAR 'val tmp1_receiver: test.C? flags:[val] declared in test.testProperty' type=test.C? origin=null
                    value: CALL 'public final fun inc <> (): kotlin.Int? flags:[] declared in test' type=kotlin.Int? origin=POSTFIX_INCR
                      $receiver: GET_VAR 'val tmp2: kotlin.Int flags:[val] declared in test.testProperty' type=kotlin.Int origin=null
                  GET_VAR 'val tmp2: kotlin.Int flags:[val] declared in test.testProperty' type=kotlin.Int origin=null
  FUN name:testArrayAccess visibility:public modality:FINAL <> (nc:test.C?) returnType:kotlin.Unit flags:[]
    VALUE_PARAMETER name:nc index:0 type:test.C? flags:[]
    BLOCK_BODY
      TYPE_OP type=kotlin.Unit origin=IMPLICIT_COERCION_TO_UNIT typeOperand=kotlin.Unit
        typeOperand: CLASS IR_EXTERNAL_DECLARATION_STUB OBJECT name:Unit modality:FINAL visibility:public flags:[] superTypes:[kotlin.Any]
        BLOCK type=kotlin.Int origin=POSTFIX_INCR
          VAR IR_TEMPORARY_VARIABLE name:tmp1_array type:kotlin.Int? flags:[val]
            BLOCK type=kotlin.Int? origin=SAFE_CALL
              VAR IR_TEMPORARY_VARIABLE name:tmp0_safe_receiver type:test.C? flags:[val]
                GET_VAR 'nc: test.C? flags:[] declared in test.testArrayAccess' type=test.C? origin=null
              WHEN type=kotlin.Int? origin=null
                BRANCH
                  if: CALL 'public final fun EQEQ <> (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean flags:[] declared in kotlin.internal.ir' type=kotlin.Boolean origin=EQEQ
                    arg0: GET_VAR 'val tmp0_safe_receiver: test.C? flags:[val] declared in test.testArrayAccess' type=test.C? origin=null
                    arg1: CONST Null type=kotlin.Nothing? value=null
                  then: CONST Null type=kotlin.Nothing? value=null
                BRANCH
                  if: CONST Boolean type=kotlin.Boolean value=true
                  then: CALL 'public final fun <get-p> <> (): kotlin.Int flags:[] declared in test' type=kotlin.Int origin=GET_PROPERTY
                    $receiver: GET_VAR 'val tmp0_safe_receiver: test.C? flags:[val] declared in test.testArrayAccess' type=test.C? origin=null
          VAR IR_TEMPORARY_VARIABLE name:tmp2_index0 type:kotlin.Int flags:[val]
            CONST Int type=kotlin.Int value=0
          VAR IR_TEMPORARY_VARIABLE name:tmp3 type:kotlin.Int flags:[val]
            CALL 'public final fun get <> (index: kotlin.Int): kotlin.Int flags:[] declared in test' type=kotlin.Int origin=POSTFIX_INCR
              $receiver: GET_VAR 'val tmp1_array: kotlin.Int? flags:[val] declared in test.testArrayAccess' type=kotlin.Int? origin=null
              index: GET_VAR 'val tmp2_index0: kotlin.Int flags:[val] declared in test.testArrayAccess' type=kotlin.Int origin=null
          CALL 'public final fun set <> (index: kotlin.Int, value: kotlin.Int): kotlin.Unit flags:[] declared in test' type=kotlin.Unit origin=POSTFIX_INCR
            $receiver: GET_VAR 'val tmp1_array: kotlin.Int? flags:[val] declared in test.testArrayAccess' type=kotlin.Int? origin=null
            index: GET_VAR 'val tmp2_index0: kotlin.Int flags:[val] declared in test.testArrayAccess' type=kotlin.Int origin=null
            value: CALL 'public final fun inc <> (): kotlin.Int flags:[] declared in kotlin.Int' type=kotlin.Int origin=POSTFIX_INCR
              $this: GET_VAR 'val tmp3: kotlin.Int flags:[val] declared in test.testArrayAccess' type=kotlin.Int origin=null
          GET_VAR 'val tmp3: kotlin.Int flags:[val] declared in test.testArrayAccess' type=kotlin.Int origin=null
