FILE fqName:<root> fileName:/whenWithSubjectVariable.kt
  FUN name:foo visibility:public modality:FINAL <> () returnType:kotlin.Any flags:[]
    BLOCK_BODY
      RETURN type=kotlin.Nothing from='public final fun foo <> (): kotlin.Any flags:[] declared in <root>'
        CONST Int type=kotlin.Int value=1
  FUN name:test visibility:public modality:FINAL <> () returnType:kotlin.Int flags:[]
    BLOCK_BODY
      RETURN type=kotlin.Nothing from='public final fun test <> (): kotlin.Int flags:[] declared in <root>'
        BLOCK type=kotlin.Int origin=WHEN
          VAR name:y type:kotlin.Any flags:[val]
            CALL 'public final fun foo <> (): kotlin.Any flags:[] declared in <root>' type=kotlin.Any origin=null
          WHEN type=kotlin.Int origin=WHEN
            BRANCH
              if: CALL 'public final fun EQEQ <> (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean flags:[] declared in kotlin.internal.ir' type=kotlin.Boolean origin=EQEQ
                arg0: GET_VAR 'val y: kotlin.Any flags:[val] declared in <root>.test' type=kotlin.Any origin=null
                arg1: CONST Int type=kotlin.Int value=42
              then: CONST Int type=kotlin.Int value=1
            BRANCH
              if: TYPE_OP type=kotlin.Boolean origin=INSTANCEOF typeOperand=kotlin.String
                typeOperand: CLASS IR_EXTERNAL_DECLARATION_STUB CLASS name:String modality:FINAL visibility:public flags:[] superTypes:[kotlin.Comparable<kotlin.String>; kotlin.CharSequence; java.io.Serializable]
                GET_VAR 'val y: kotlin.Any flags:[val] declared in <root>.test' type=kotlin.Any origin=null
              then: CALL 'public open fun <get-length> <> (): kotlin.Int flags:[] declared in kotlin.String' type=kotlin.Int origin=GET_PROPERTY
                $this: TYPE_OP type=kotlin.String origin=IMPLICIT_CAST typeOperand=kotlin.String
                  typeOperand: CLASS IR_EXTERNAL_DECLARATION_STUB CLASS name:String modality:FINAL visibility:public flags:[] superTypes:[kotlin.Comparable<kotlin.String>; kotlin.CharSequence; java.io.Serializable]
                  GET_VAR 'val y: kotlin.Any flags:[val] declared in <root>.test' type=kotlin.Any origin=null
            BRANCH
              if: CALL 'public final fun NOT <> (arg0: kotlin.Boolean): kotlin.Boolean flags:[] declared in kotlin.internal.ir' type=kotlin.Boolean origin=EXCL
                arg0: TYPE_OP type=kotlin.Boolean origin=INSTANCEOF typeOperand=kotlin.Int
                  typeOperand: CLASS IR_EXTERNAL_DECLARATION_STUB CLASS name:Int modality:FINAL visibility:public flags:[] superTypes:[kotlin.Number; kotlin.Comparable<kotlin.Int>; java.io.Serializable]
                  GET_VAR 'val y: kotlin.Any flags:[val] declared in <root>.test' type=kotlin.Any origin=null
              then: CONST Int type=kotlin.Int value=2
            BRANCH
              if: CALL 'public open fun contains <> (value: kotlin.Int): kotlin.Boolean flags:[] declared in kotlin.ranges.IntRange' type=kotlin.Boolean origin=IN
                $this: CALL 'public final fun rangeTo <> (other: kotlin.Int): kotlin.ranges.IntRange flags:[] declared in kotlin.Int' type=kotlin.ranges.IntRange origin=RANGE
                  $this: CONST Int type=kotlin.Int value=0
                  other: CONST Int type=kotlin.Int value=10
                value: TYPE_OP type=kotlin.Int origin=IMPLICIT_CAST typeOperand=kotlin.Int
                  typeOperand: CLASS IR_EXTERNAL_DECLARATION_STUB CLASS name:Int modality:FINAL visibility:public flags:[] superTypes:[kotlin.Number; kotlin.Comparable<kotlin.Int>; java.io.Serializable]
                  GET_VAR 'val y: kotlin.Any flags:[val] declared in <root>.test' type=kotlin.Any origin=null
              then: CONST Int type=kotlin.Int value=3
            BRANCH
              if: CALL 'public final fun NOT <> (arg0: kotlin.Boolean): kotlin.Boolean flags:[] declared in kotlin.internal.ir' type=kotlin.Boolean origin=EXCL
                arg0: CALL 'public open fun contains <> (value: kotlin.Int): kotlin.Boolean flags:[] declared in kotlin.ranges.IntRange' type=kotlin.Boolean origin=NOT_IN
                  $this: CALL 'public final fun rangeTo <> (other: kotlin.Int): kotlin.ranges.IntRange flags:[] declared in kotlin.Int' type=kotlin.ranges.IntRange origin=RANGE
                    $this: CONST Int type=kotlin.Int value=10
                    other: CONST Int type=kotlin.Int value=20
                  value: TYPE_OP type=kotlin.Int origin=IMPLICIT_CAST typeOperand=kotlin.Int
                    typeOperand: CLASS IR_EXTERNAL_DECLARATION_STUB CLASS name:Int modality:FINAL visibility:public flags:[] superTypes:[kotlin.Number; kotlin.Comparable<kotlin.Int>; java.io.Serializable]
                    GET_VAR 'val y: kotlin.Any flags:[val] declared in <root>.test' type=kotlin.Any origin=null
              then: CONST Int type=kotlin.Int value=4
            BRANCH
              if: CONST Boolean type=kotlin.Boolean value=true
              then: CONST Int type=kotlin.Int value=-1
